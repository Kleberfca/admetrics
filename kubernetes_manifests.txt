# infrastructure/kubernetes/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: admetrics
  labels:
    name: admetrics
    environment: production

---

# infrastructure/kubernetes/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: admetrics-config
  namespace: admetrics
data:
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  FRONTEND_URL: "https://dashboard.admetrics.ai"
  API_URL: "https://api.admetrics.ai"
  REDIS_PREFIX: "admetrics:"
  CACHE_TTL: "300"
  ENABLE_METRICS: "true"
  ENABLE_REQUEST_LOGGING: "true"
  RATE_LIMIT_WINDOW_MS: "60000"
  RATE_LIMIT_MAX_REQUESTS: "1000"

---

# infrastructure/kubernetes/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: admetrics-secrets
  namespace: admetrics
type: Opaque
data:
  # Base64 encoded secrets - replace with actual values
  DATABASE_URL: cG9zdGdyZXNxbDovL3VzZXI6cGFzc0Bob3N0OjU0MzIvZGI=
  REDIS_URL: cmVkaXM6Ly9yZWRpcy1zZXJ2aWNlOjYzNzk=
  JWT_SECRET: eW91ci1qd3Qtc2VjcmV0LWtleQ==
  ENCRYPTION_KEY: eW91ci1lbmNyeXB0aW9uLWtleQ==
  GOOGLE_ADS_DEVELOPER_TOKEN: eW91ci1nb29nbGUtYWRzLXRva2Vu
  FACEBOOK_APP_SECRET: eW91ci1mYWNlYm9vay1hcHAtc2VjcmV0

---

# infrastructure/kubernetes/backend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: admetrics-backend
  namespace: admetrics
  labels:
    app: admetrics-backend
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: admetrics-backend
  template:
    metadata:
      labels:
        app: admetrics-backend
        version: v1
    spec:
      containers:
      - name: backend
        image: admetrics/backend:latest
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: PORT
          value: "3000"
        envFrom:
        - configMapRef:
            name: admetrics-config
        - secretRef:
            name: admetrics-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 15"]
      terminationGracePeriodSeconds: 30

---

# infrastructure/kubernetes/frontend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: admetrics-frontend
  namespace: admetrics
  labels:
    app: admetrics-frontend
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: admetrics-frontend
  template:
    metadata:
      labels:
        app: admetrics-frontend
        version: v1
    spec:
      containers:
      - name: frontend
        image: admetrics/frontend:latest
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: REACT_APP_API_URL
          value: "https://api.admetrics.ai"
        - name: REACT_APP_WS_URL
          value: "wss://api.admetrics.ai"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5

---

# infrastructure/kubernetes/ai-engine-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: admetrics-ai-engine
  namespace: admetrics
  labels:
    app: admetrics-ai-engine
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: admetrics-ai-engine
  template:
    metadata:
      labels:
        app: admetrics-ai-engine
        version: v1
    spec:
      containers:
      - name: ai-engine
        image: admetrics/ai-engine:latest
        ports:
        - containerPort: 5000
          name: http
        env:
        - name: FLASK_ENV
          value: "production"
        - name: MODEL_PATH
          value: "/app/models"
        envFrom:
        - configMapRef:
            name: admetrics-config
        - secretRef:
            name: admetrics-secrets
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        volumeMounts:
        - name: model-storage
          mountPath: /app/models
      volumes:
      - name: model-storage
        persistentVolumeClaim:
          claimName: ai-models-pvc

---

# infrastructure/kubernetes/postgres-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: admetrics
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "admetrics"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---

# infrastructure/kubernetes/redis-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: admetrics
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --maxmemory
        - "256mb"
        - --maxmemory-policy
        - "allkeys-lru"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: redis-storage
          mountPath: /data
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc

---

# infrastructure/kubernetes/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: admetrics-backend-service
  namespace: admetrics
  labels:
    app: admetrics-backend
spec:
  selector:
    app: admetrics-backend
  ports:
  - name: http
    port: 3000
    targetPort: 3000
  type: ClusterIP

---

apiVersion: v1
kind: Service
metadata:
  name: admetrics-frontend-service
  namespace: admetrics
  labels:
    app: admetrics-frontend
spec:
  selector:
    app: admetrics-frontend
  ports:
  - name: http
    port: 3000
    targetPort: 3000
  type: ClusterIP

---

apiVersion: v1
kind: Service
metadata:
  name: admetrics-ai-service
  namespace: admetrics
  labels:
    app: admetrics-ai-engine
spec:
  selector:
    app: admetrics-ai-engine
  ports:
  - name: http
    port: 5000
    targetPort: 5000
  type: ClusterIP

---

apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: admetrics
  labels:
    app: postgres
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---

apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: admetrics
  labels:
    app: redis
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---

# infrastructure/kubernetes/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: admetrics-ingress
  namespace: admetrics
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - dashboard.admetrics.ai
    - api.admetrics.ai
    secretName: admetrics-tls
  rules:
  - host: dashboard.admetrics.ai
    http:
      paths:
      - path: /(.*)
        pathType: Prefix
        backend:
          service:
            name: admetrics-frontend-service
            port:
              number: 3000
  - host: api.admetrics.ai
    http:
      paths:
      - path: /api/(.*)
        pathType: Prefix
        backend:
          service:
            name: admetrics-backend-service
            port:
              number: 3000
      - path: /ai/(.*)
        pathType: Prefix
        backend:
          service:
            name: admetrics-ai-service
            port:
              number: 5000

---

# infrastructure/kubernetes/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: admetrics
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: gp3

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: admetrics
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: gp3

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ai-models-pvc
  namespace: admetrics
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp3

---

# infrastructure/kubernetes/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: admetrics-backend-hpa
  namespace: admetrics
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: admetrics-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: admetrics-ai-hpa
  namespace: admetrics
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: admetrics-ai-engine
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85

---

# infrastructure/kubernetes/network-policy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: admetrics-network-policy
  namespace: admetrics
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector: {}
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379