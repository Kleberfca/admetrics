// AdMetrics AI Dashboard - Complete Prisma Schema
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================================================
// USER AND AUTHENTICATION MODELS
// =============================================================================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  avatar        String?
  password      String?
  provider      String?   // 'local', 'google', 'facebook'
  providerId    String?
  emailVerified Boolean   @default(false)
  isActive      Boolean   @default(true)
  role          UserRole  @default(USER)
  timezone      String    @default("UTC")
  language      String    @default("en")
  
  // User preferences stored as JSON
  preferences   Json?
  
  // Relationships
  organizations OrganizationMember[]
  integrations  Integration[]
  campaigns     Campaign[]
  reports       Report[]
  dashboards    Dashboard[]
  alerts        Alert[]
  sessions      UserSession[]
  apiKeys       ApiKey[]
  uploads       Upload[]
  notifications Notification[]
  subscription  Subscription?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?

  @@map("users")
}

enum UserRole {
  ADMIN
  USER
  VIEWER
}

model UserSession {
  id          String   @id @default(cuid())
  userId      String
  token       String   @unique
  refreshToken String? @unique
  userAgent   String?
  ipAddress   String?
  isValid     Boolean  @default(true)
  expiresAt   DateTime
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("user_sessions")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  domain      String?
  logo        String?
  settings    Json?
  
  members     OrganizationMember[]
  integrations Integration[]
  campaigns   Campaign[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("organizations")
}

model OrganizationMember {
  id             String           @id @default(cuid())
  userId         String
  organizationId String
  role           OrganizationRole @default(MEMBER)
  permissions    Json?
  
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, organizationId])
  @@map("organization_members")
}

enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  name        String
  key         String   @unique
  isActive    Boolean  @default(true)
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  permissions Json?
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("api_keys")
}

// =============================================================================
// PLATFORM INTEGRATION MODELS
// =============================================================================

model Integration {
  id               String            @id @default(cuid())
  userId           String
  organizationId   String?
  platform         Platform
  name             String
  status           IntegrationStatus @default(PENDING)
  
  // Encrypted credentials and configuration
  credentials      Json
  config           Json?
  scopes           String[]
  
  // Sync settings
  syncEnabled      Boolean           @default(true)
  syncFrequency    SyncFrequency     @default(HOURLY)
  lastSyncAt       DateTime?
  nextSyncAt       DateTime?
  
  // Error handling
  errorCount       Int               @default(0)
  lastError        String?
  lastErrorAt      DateTime?
  
  // Relationships
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization     Organization?     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  campaigns        Campaign[]
  metrics          Metric[]
  syncLogs         SyncLog[]
  
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@unique([userId, platform, name])
  @@map("integrations")
}

enum Platform {
  GOOGLE_ADS
  FACEBOOK_ADS
  INSTAGRAM_ADS
  TIKTOK_ADS
  LINKEDIN_ADS
  TWITTER_ADS
  PINTEREST_ADS
  SNAPCHAT_ADS
  YOUTUBE_ADS
  GOOGLE_ANALYTICS
}

enum IntegrationStatus {
  PENDING
  ACTIVE
  ERROR
  DISABLED
  EXPIRED
}

enum SyncFrequency {
  REAL_TIME
  HOURLY
  DAILY
  WEEKLY
}

model SyncLog {
  id            String      @id @default(cuid())
  integrationId String
  status        SyncStatus
  recordsCount  Int         @default(0)
  errorMessage  String?
  duration      Int?        // Duration in milliseconds
  metadata      Json?
  
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime    @default(now())

  @@map("sync_logs")
}

enum SyncStatus {
  PENDING
  RUNNING
  SUCCESS
  ERROR
}

// =============================================================================
// CAMPAIGN AND METRICS MODELS
// =============================================================================

model Campaign {
  id             String       @id @default(cuid())
  userId         String
  integrationId  String
  organizationId String?
  
  // Campaign details
  externalId     String       // ID from the advertising platform
  name           String
  status         CampaignStatus
  objective      String?
  platform       Platform
  
  // Budget and scheduling
  budget         Decimal?     @db.Decimal(12, 2)
  budgetType     BudgetType?
  startDate      DateTime?
  endDate        DateTime?
  
  // Targeting and configuration
  targeting      Json?
  geoTargeting   Json?
  demographics   Json?
  interests      Json?
  keywords       Json?
  
  // Creative assets
  creatives      Json?
  
  // Relationships
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  integration    Integration  @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  metrics        Metric[]
  insights       AIInsight[]
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([integrationId, externalId])
  @@index([userId])
  @@index([platform])
  @@index([status])
  @@map("campaigns")
}

enum CampaignStatus {
  ACTIVE
  PAUSED
  ENDED
  DRAFT
  PENDING_REVIEW
  REJECTED
}

enum BudgetType {
  DAILY
  LIFETIME
}

model Metric {
  id            String     @id @default(cuid())
  campaignId    String
  integrationId String
  platform      Platform
  date          DateTime
  metricType    MetricType
  
  // Core metrics
  spend         Decimal?   @db.Decimal(12, 2)
  clicks        Int?
  impressions   Int?
  conversions   Int?
  revenue       Decimal?   @db.Decimal(12, 2)
  
  // Calculated metrics
  ctr           Decimal?   @db.Decimal(8, 6) // Click-through rate
  cpc           Decimal?   @db.Decimal(8, 2) // Cost per click
  cpm           Decimal?   @db.Decimal(8, 2) // Cost per mille
  cpa           Decimal?   @db.Decimal(8, 2) // Cost per acquisition
  cpl           Decimal?   @db.Decimal(8, 2) // Cost per lead
  roas          Decimal?   @db.Decimal(8, 4) // Return on ad spend
  roi           Decimal?   @db.Decimal(8, 4) // Return on investment
  
  // Platform-specific metrics
  platformData  Json?
  
  // Quality metrics
  qualityScore     Decimal? @db.Decimal(4, 2)
  relevanceScore   Decimal? @db.Decimal(4, 2)
  engagementRate   Decimal? @db.Decimal(8, 6)
  videoViews       Int?
  videoCompletions Int?
  
  // Relationships
  campaign      Campaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([campaignId, date, metricType])
  @@index([date])
  @@index([platform])
  @@index([campaignId, date])
  @@map("metrics")
}

enum MetricType {
  DAILY
  WEEKLY
  MONTHLY
  TOTAL
}

// =============================================================================
// AI AND ANALYTICS MODELS
// =============================================================================

model AIInsight {
  id          String      @id @default(cuid())
  campaignId  String
  type        InsightType
  category    InsightCategory
  
  // Insight content
  title       String
  description String
  confidence  Decimal     @db.Decimal(4, 3) // 0.000 to 1.000
  priority    Priority    @default(MEDIUM)
  
  // Recommendations and impact
  recommendations Json?
  impact      Json?
  metadata    Json?
  
  // Status and lifecycle
  status      InsightStatus @default(ACTIVE)
  appliedAt   DateTime?
  dismissedAt DateTime?
  expiresAt   DateTime?
  
  // Relationships
  campaign    Campaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([campaignId])
  @@index([type])
  @@index([priority])
  @@index([status])
  @@map("ai_insights")
}

enum InsightType {
  PERFORMANCE_ANOMALY
  BUDGET_OPTIMIZATION
  AUDIENCE_EXPANSION
  CREATIVE_OPTIMIZATION
  BID_OPTIMIZATION
  KEYWORD_OPPORTUNITY
  COMPETITIVE_INTELLIGENCE
  SEASONAL_TREND
  FRAUD_DETECTION
}

enum InsightCategory {
  OPTIMIZATION
  ALERT
  OPPORTUNITY
  RECOMMENDATION
  WARNING
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum InsightStatus {
  ACTIVE
  APPLIED
  DISMISSED
  EXPIRED
}

model MLModel {
  id          String      @id @default(cuid())
  name        String
  version     String
  type        ModelType
  platform    Platform?
  
  // Model metadata
  description String?
  algorithm   String
  features    String[]
  performance Json
  
  // Model files and configuration
  modelPath   String
  config      Json
  
  // Training information
  trainedAt   DateTime
  trainingData Json
  
  // Status and deployment
  isActive    Boolean     @default(false)
  isDeployed  Boolean     @default(false)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@unique([name, version])
  @@map("ml_models")
}

enum ModelType {
  PERFORMANCE_PREDICTOR
  BUDGET_OPTIMIZER
  ANOMALY_DETECTOR
  AUDIENCE_SEGMENTER
  CREATIVE_ANALYZER
  BID_OPTIMIZER
}

// =============================================================================
// DASHBOARD AND REPORTING MODELS
// =============================================================================

model Dashboard {
  id          String      @id @default(cuid())
  userId      String
  name        String
  description String?
  
  // Layout and configuration
  layout      Json
  widgets     Json
  filters     Json?
  
  // Sharing and permissions
  isPublic    Boolean     @default(false)
  shareToken  String?     @unique
  
  // Relationships
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@unique([userId, name])
  @@map("dashboards")
}

model Report {
  id          String      @id @default(cuid())
  userId      String
  name        String
  description String?
  type        ReportType
  
  // Report configuration
  config      Json
  filters     Json?
  schedule    Json?
  
  // Generation status
  status      ReportStatus @default(DRAFT)
  filePath    String?
  fileSize    BigInt?
  generatedAt DateTime?
  
  // Sharing
  isPublic    Boolean     @default(false)
  shareToken  String?     @unique
  
  // Relationships
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([userId])
  @@index([status])
  @@map("reports")
}

enum ReportType {
  PERFORMANCE
  CAMPAIGN_ANALYSIS
  PLATFORM_COMPARISON
  AUDIENCE_INSIGHTS
  BUDGET_ANALYSIS
  AI_INSIGHTS
  CUSTOM
}

enum ReportStatus {
  DRAFT
  GENERATING
  COMPLETED
  ERROR
  SCHEDULED
}

model Alert {
  id          String      @id @default(cuid())
  userId      String
  name        String
  description String?
  
  // Alert conditions and configuration
  conditions  Json
  channels    AlertChannel[]
  
  // Alert settings
  isActive    Boolean     @default(true)
  lastTriggered DateTime?
  triggerCount Int        @default(0)
  
  // Relationships
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([userId])
  @@index([isActive])
  @@map("alerts")
}

enum AlertChannel {
  EMAIL
  SMS
  PUSH
  SLACK
  WEBHOOK
  DISCORD
}

// =============================================================================
// CONTENT AND ASSETS MODELS
// =============================================================================

model Upload {
  id          String      @id @default(cuid())
  userId      String
  filename    String
  originalName String
  mimeType    String
  size        BigInt
  path        String
  url         String?
  
  // Metadata
  metadata    Json?
  tags        String[]
  
  // Relationships
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([userId])
  @@index([mimeType])
  @@map("uploads")
}

model AuditLog {
  id          String      @id @default(cuid())
  userId      String?
  entityType  String
  entityId    String
  action      String
  changes     Json?
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  
  createdAt   DateTime    @default(now())
  
  @@index([userId])
  @@index([entityType, entityId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

model Notification {
  id          String      @id @default(cuid())
  userId      String
  type        String
  title       String
  message     String
  data        Json?
  
  // Status
  isRead      Boolean     @default(false)
  readAt      DateTime?
  
  // Relationships
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

// =============================================================================
// FEATURE FLAGS AND CONFIGURATION
// =============================================================================

model FeatureFlag {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  isEnabled   Boolean     @default(false)
  rules       Json?
  rolloutPercentage Int   @default(0)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@map("feature_flags")
}

model SystemConfig {
  id          String      @id @default(cuid())
  key         String      @unique
  value       Json
  description String?
  isPublic    Boolean     @default(false)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@map("system_config")
}

// =============================================================================
// SUBSCRIPTION AND BILLING (for SaaS)
// =============================================================================

model Subscription {
  id                String      @id @default(cuid())
  userId            String      @unique
  planId            String
  status            SubscriptionStatus
  
  // Billing details
  stripeCustomerId  String?
  stripeSubscriptionId String?
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  
  // Usage limits
  campaignLimit     Int?
  integrationsLimit Int?
  usersLimit        Int?
  
  // Relationships
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@map("subscriptions")
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

model BillingEvent {
  id               String      @id @default(cuid())
  userId           String
  subscriptionId   String?
  type             String
  amount           Decimal     @db.Decimal(10, 2)
  currency         String      @default("USD")
  status           String
  
  // Stripe details
  stripeEventId    String?
  stripeInvoiceId  String?
  
  metadata         Json?
  
  createdAt        DateTime    @default(now())
  
  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@map("billing_events")
}