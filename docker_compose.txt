version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: admetrics_postgres
    environment:
      POSTGRES_DB: admetrics
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - admetrics_network

  redis:
    image: redis:7-alpine
    container_name: admetrics_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - admetrics_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: admetrics_backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/admetrics
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key
      PORT: 3000
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - admetrics_network
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: admetrics_frontend
    environment:
      REACT_APP_API_URL: http://localhost:3000/api
      REACT_APP_WS_URL: ws://localhost:3000
    ports:
      - "3001:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - admetrics_network
    restart: unless-stopped

  # AI Engine (Python/Flask)
  ai-engine:
    build:
      context: ./ai-engine
      dockerfile: Dockerfile
    container_name: admetrics_ai
    environment:
      FLASK_ENV: development
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/admetrics
      REDIS_URL: redis://redis:6379
      MODEL_PATH: /app/models
    ports:
      - "5000:5000"
    volumes:
      - ./ai-engine:/app
      - ai_models:/app/models
    depends_on:
      - postgres
      - redis
    networks:
      - admetrics_network
    restart: unless-stopped

  # Data Pipeline (ETL)
  data-pipeline:
    build:
      context: ./data-pipeline
      dockerfile: Dockerfile
    container_name: admetrics_pipeline
    environment:
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/admetrics
      REDIS_URL: redis://redis:6379
      AIRFLOW_ADMIN_USER: admin
      AIRFLOW_ADMIN_PASSWORD: admin123
    volumes:
      - ./data-pipeline:/app
      - pipeline_logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - admetrics_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: admetrics_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/certs:/etc/nginx/certs
    depends_on:
      - backend
      - frontend
    networks:
      - admetrics_network
    restart: unless-stopped

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: admetrics_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - admetrics_network

  grafana:
    image: grafana/grafana:latest
    container_name: admetrics_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    ports:
      - "3003:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - admetrics_network

  # ElasticSearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: admetrics_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - admetrics_network

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: admetrics_kibana
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - admetrics_network

  # Message Queue (Optional - for high-throughput scenarios)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: admetrics_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - admetrics_network

networks:
  admetrics_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  ai_models:
  pipeline_logs:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  rabbitmq_data: