version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: admetrics_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admetrics}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admetrics123}
      POSTGRES_DB: ${POSTGRES_DB:-admetrics}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admetrics}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: admetrics_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: admetrics_backend
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-admetrics}:${POSTGRES_PASSWORD:-admetrics123}@postgres:5432/${POSTGRES_DB:-admetrics}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      - AI_ENGINE_URL=http://ai-engine:5000
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-here}
      - NODE_ENV=${NODE_ENV:-development}
    volumes:
      - ./backend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev

# AI Engine
  ai-engine:
    build:
      context: ./ai-engine
      dockerfile: Dockerfile
    container_name: admetrics_ai_engine
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis123}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB:-admetrics}
      - DB_USER=${POSTGRES_USER:-admetrics}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-admetrics123}
      - MODEL_CACHE_DIR=/app/models
      - FLASK_ENV=${ENVIRONMENT:-development}
    volumes:
      - ./ai-engine:/app
      - ai_models:/app/models
    ports:
      - "5000:5000"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    command: python src/api/app.py

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: admetrics_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      - backend
    command: npm run dev

  # Celery Worker
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: admetrics_celery_worker
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-admetrics}:${POSTGRES_PASSWORD:-admetrics123}@postgres:5432/${POSTGRES_DB:-admetrics}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.worker worker --loglevel=info

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: admetrics_celery_beat
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-admetrics}:${POSTGRES_PASSWORD:-admetrics123}@postgres:5432/${POSTGRES_DB:-admetrics}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.worker beat --loglevel=info

  # Flower (Celery monitoring)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: admetrics_flower
    environment:
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
    command: celery -A app.worker flower --port=5555

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: admetrics_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
      - ai-engine

volumes:
  postgres_data:
  redis_data:
  ai_models:

networks:
  default:
    name: admetrics_network