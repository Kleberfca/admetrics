# backend/Dockerfile
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies based on the preferred package manager
COPY package.json package-lock.json* ./
RUN npm ci --only=production

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Generate Prisma client
RUN npx prisma generate

# Build the application
RUN npm run build

# Development image
FROM base AS development
WORKDIR /app

RUN apk add --no-cache curl

COPY package.json package-lock.json* ./
RUN npm ci

COPY . .
RUN npx prisma generate

EXPOSE 3000
ENV NODE_ENV=development
CMD ["npm", "run", "dev"]

# Production image, copy all the files and run next
FROM base AS production
WORKDIR /app

RUN apk add --no-cache curl

ENV NODE_ENV=production

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 admetrics

COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/prisma ./prisma

USER admetrics

EXPOSE 3000

ENV PORT 3000

CMD ["node", "dist/app.js"]

# Test image
FROM builder AS test
WORKDIR /app
ENV NODE_ENV=test
CMD ["npm", "test"]

---

# frontend/Dockerfile
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies based on the preferred package manager
COPY package.json package-lock.json* ./
RUN npm ci

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Build the application
ENV NEXT_TELEMETRY_DISABLED 1
RUN npm run build

# Development image
FROM base AS development
WORKDIR /app

RUN apk add --no-cache curl

COPY package.json package-lock.json* ./
RUN npm ci

COPY . .

EXPOSE 3000
ENV NODE_ENV=development
CMD ["npm", "start"]

# Production image, copy all the files and run the app
FROM base AS production
WORKDIR /app

RUN apk add --no-cache curl

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED 1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 admetrics

COPY --from=builder /app/build ./build
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json

# Install serve globally for serving static files
RUN npm install -g serve

USER admetrics

EXPOSE 3000

ENV PORT 3000

CMD ["serve", "-s", "build", "-l", "3000"]

# Test image
FROM builder AS test
WORKDIR /app
ENV NODE_ENV=test
ENV CI=true
CMD ["npm", "test", "--", "--coverage", "--watchAll=false"]

---

# ai-engine/Dockerfile
FROM python:3.11-slim AS base

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH=/app

WORKDIR /app

# Install system dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        build-essential \
        curl \
        libpq-dev \
        gcc \
        g++ \
        git \
    && rm -rf /var/lib/apt/lists/*

# Development stage
FROM base AS development

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Install development dependencies
COPY requirements-dev.txt .
RUN pip install --no-cache-dir -r requirements-dev.txt

COPY . .

EXPOSE 5000

ENV FLASK_ENV=development
ENV FLASK_DEBUG=1

CMD ["python", "src/api/app.py"]

# Production stage
FROM base AS production

# Create non-root user
RUN groupadd --gid 1001 admetrics \
    && useradd --uid 1001 --gid admetrics --shell /bin/bash --create-home admetrics

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY --chown=admetrics:admetrics . .

# Create directories for models and data
RUN mkdir -p /app/models /app/data /app/logs \
    && chown -R admetrics:admetrics /app

USER admetrics

EXPOSE 5000

ENV FLASK_ENV=production
ENV FLASK_DEBUG=0

# Use gunicorn for production
CMD ["gunicorn", "--bind", "0.0.0.0:5000", "--workers", "4", "--timeout", "120", "src.api.app:app"]

# Test stage
FROM development AS test

ENV FLASK_ENV=test

CMD ["python", "-m", "pytest", "tests/", "--cov=src", "--cov-report=xml", "--cov-report=term-missing"]

---

# data-pipeline/Dockerfile
FROM python:3.11-slim AS base

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH=/app

WORKDIR /app

# Install system dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        build-essential \
        curl \
        libpq-dev \
        gcc \
        cron \
        supervisor \
    && rm -rf /var/lib/apt/lists/*

# Development stage
FROM base AS development

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

# Create directories
RUN mkdir -p /app/data /app/logs

EXPOSE 8000

ENV PYTHON_ENV=development

CMD ["python", "src/scheduler/main.py"]

# Production stage
FROM base AS production

# Create non-root user
RUN groupadd --gid 1001 admetrics \
    && useradd --uid 1001 --gid admetrics --shell /bin/bash --create-home admetrics

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY --chown=admetrics:admetrics . .

# Create directories
RUN mkdir -p /app/data /app/logs \
    && chown -R admetrics:admetrics /app

# Setup cron jobs
COPY --chown=admetrics:admetrics crontab /etc/cron.d/admetrics-cron
RUN chmod 0644 /etc/cron.d/admetrics-cron \
    && crontab -u admetrics /etc/cron.d/admetrics-cron

# Setup supervisor configuration
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

USER admetrics

ENV PYTHON_ENV=production

CMD ["supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]

# Test stage
FROM development AS test

ENV PYTHON_ENV=test

CMD ["python", "-m", "pytest", "tests/", "--cov=src", "--cov-report=xml"]

---

# .dockerignore (shared for all services)
# Dependencies
node_modules
npm-debug.log*
yarn-debug.log*
yarn-error.log*
__pycache__
*.pyc
*.pyo
*.pyd
.Python
build
develop-eggs
dist
downloads
eggs
.eggs
lib
lib64
parts
sdist
var
wheels
*.egg-info
.installed.cfg
*.egg
MANIFEST

# Virtual environments
venv/
env/
ENV/

# IDEs
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
logs
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage
*.lcov
.nyc_output

# Dependency directories
jspm_packages/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# Git
.git
.gitignore
README.md

# Docker
Dockerfile*
docker-compose*
.dockerignore

# Testing
coverage/
.nyc_output/
test-results/
junit.xml

# Build outputs
build/
dist/
out/

# Database
*.db
*.sqlite
*.sqlite3

# Uploads and temporary files
uploads/
tmp/
temp/