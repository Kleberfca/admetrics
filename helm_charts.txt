# helm/admetrics/Chart.yaml
apiVersion: v2
name: admetrics
description: AdMetrics AI Dashboard - Intelligent Advertising Analytics
type: application
version: 1.0.0
appVersion: "1.0.0"
keywords:
  - advertising
  - analytics
  - ai
  - dashboard
  - metrics
home: https://admetrics.ai
sources:
  - https://github.com/your-org/admetrics-ai-dashboard
maintainers:
  - name: AdMetrics Team
    email: dev@admetrics.ai
    url: https://admetrics.ai
dependencies:
  - name: postgresql
    version: 12.x.x
    repository: https://charts.bitnami.com/bitnami
    condition: postgresql.enabled
  - name: redis
    version: 17.x.x
    repository: https://charts.bitnami.com/bitnami
    condition: redis.enabled

---

# helm/admetrics/values.yaml
# Default values for AdMetrics AI Dashboard

# Global settings
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Application settings
replicaCount: 3
environment: production

image:
  registry: docker.io
  repository: admetrics
  tag: "latest"
  pullPolicy: IfNotPresent

# Service configuration
service:
  type: ClusterIP
  ports:
    backend: 3000
    frontend: 3000
    ai: 5000

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
  hosts:
    - host: dashboard.admetrics.ai
      paths:
        - path: /
          pathType: Prefix
          service: frontend
    - host: api.admetrics.ai
      paths:
        - path: /api
          pathType: Prefix
          service: backend
        - path: /ai
          pathType: Prefix
          service: ai-engine
  tls:
    - secretName: admetrics-tls
      hosts:
        - dashboard.admetrics.ai
        - api.admetrics.ai

# Resource limits
resources:
  backend:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  frontend:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  aiEngine:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi

# Autoscaling
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Node selection
nodeSelector: {}
tolerations: []
affinity: {}

# Security context
securityContext:
  runAsNonRoot: true
  runAsUser: 1001
  fsGroup: 1001

# Service account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Network policies
networkPolicy:
  enabled: true
  ingress:
    enabled: true
  egress:
    enabled: true

# PostgreSQL dependency
postgresql:
  enabled: true
  auth:
    postgresPassword: "postgres123"
    database: "admetrics"
  primary:
    persistence:
      enabled: true
      size: 20Gi
    resources:
      requests:
        cpu: 250m
        memory: 512Mi
      limits:
        cpu: 500m
        memory: 1Gi

# Redis dependency
redis:
  enabled: true
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 5Gi
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi

# Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    namespace: monitoring
    interval: 30s
    scrapeTimeout: 10s

# Backup configuration
backup:
  enabled: true
  schedule: "0 2 * * *"
  retention: "30d"
  s3:
    enabled: false
    bucket: ""
    region: ""

# Configuration
config:
  # Environment variables
  env:
    NODE_ENV: production
    LOG_LEVEL: info
    ENABLE_METRICS: "true"
    RATE_LIMIT_MAX_REQUESTS: "1000"
    CACHE_TTL: "300"

  # Secrets (will be base64 encoded)
  secrets:
    jwtSecret: "your-jwt-secret"
    encryptionKey: "your-encryption-key"
    googleAdsToken: ""
    facebookAppSecret: ""

---

# helm/admetrics/templates/deployment-backend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "admetrics.fullname" . }}-backend
  labels:
    {{- include "admetrics.labels" . | nindent 4 }}
    component: backend
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "admetrics.selectorLabels" . | nindent 6 }}
      component: backend
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
      labels:
        {{- include "admetrics.selectorLabels" . | nindent 8 }}
        component: backend
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "admetrics.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      containers:
        - name: backend
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}/backend:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          env:
            - name: PORT
              value: "3000"
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "admetrics.fullname" . }}-secret
                  key: database-url
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "admetrics.fullname" . }}-secret
                  key: redis-url
          envFrom:
            - configMapRef:
                name: {{ include "admetrics.fullname" . }}-config
            - secretRef:
                name: {{ include "admetrics.fullname" . }}-secret
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          resources:
            {{- toYaml .Values.resources.backend | nindent 12 }}
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 15"]
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: 30

---

# helm/admetrics/templates/deployment-frontend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "admetrics.fullname" . }}-frontend
  labels:
    {{- include "admetrics.labels" . | nindent 4 }}
    component: frontend
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "admetrics.selectorLabels" . | nindent 6 }}
      component: frontend
  template:
    metadata:
      labels:
        {{- include "admetrics.selectorLabels" . | nindent 8 }}
        component: frontend
    spec:
      containers:
        - name: frontend
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}/frontend:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          env:
            - name: REACT_APP_API_URL
              value: "https://{{ (index .Values.ingress.hosts 1).host }}"
            - name: REACT_APP_WS_URL
              value: "wss://{{ (index .Values.ingress.hosts 1).host }}"
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            {{- toYaml .Values.resources.frontend | nindent 12 }}

---

# helm/admetrics/templates/deployment-ai-engine.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "admetrics.fullname" . }}-ai-engine
  labels:
    {{- include "admetrics.labels" . | nindent 4 }}
    component: ai-engine
spec:
  replicas: 2
  selector:
    matchLabels:
      {{- include "admetrics.selectorLabels" . | nindent 6 }}
      component: ai-engine
  template:
    metadata:
      labels:
        {{- include "admetrics.selectorLabels" . | nindent 8 }}
        component: ai-engine
    spec:
      containers:
        - name: ai-engine
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}/ai-engine:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          env:
            - name: FLASK_ENV
              value: {{ .Values.environment }}
            - name: MODEL_PATH
              value: "/app/models"
          envFrom:
            - configMapRef:
                name: {{ include "admetrics.fullname" . }}-config
            - secretRef:
                name: {{ include "admetrics.fullname" . }}-secret
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          resources:
            {{- toYaml .Values.resources.aiEngine | nindent 12 }}
          volumeMounts:
            - name: model-storage
              mountPath: /app/models
      volumes:
        - name: model-storage
          persistentVolumeClaim:
            claimName: {{ include "admetrics.fullname" . }}-ai-models

---

# helm/admetrics/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: {{ include "admetrics.fullname" . }}-backend
  labels:
    {{- include "admetrics.labels" . | nindent 4 }}
    component: backend
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.ports.backend }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    {{- include "admetrics.selectorLabels" . | nindent 4 }}
    component: backend

---

apiVersion: v1
kind: Service
metadata:
  name: {{ include "admetrics.fullname" . }}-frontend
  labels:
    {{- include "admetrics.labels" . | nindent 4 }}
    component: frontend
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.ports.frontend }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    {{- include "admetrics.selectorLabels" . | nindent 4 }}
    component: frontend

---

apiVersion: v1
kind: Service
metadata:
  name: {{ include "admetrics.fullname" . }}-ai-engine
  labels:
    {{- include "admetrics.labels" . | nindent 4 }}
    component: ai-engine
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.ports.ai }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    {{- include "admetrics.selectorLabels" . | nindent 4 }}
    component: ai-engine

---

# helm/admetrics/templates/_helpers.tpl
{{/*
Expand the name of the chart.
*/}}
{{- define "admetrics.name" -}}
{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" }}
{{- end }}

{{/*
Create a default fully qualified app name.
*/}}
{{- define "admetrics.fullname" -}}
{{- if .Values.fullnameOverride }}
{{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" }}
{{- else }}
{{- $name := default .Chart.Name .Values.nameOverride }}
{{- if contains $name .Release.Name }}
{{- .Release.Name | trunc 63 | trimSuffix "-" }}
{{- else }}
{{- printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" }}
{{- end }}
{{- end }}
{{- end }}

{{/*
Create chart name and version as used by the chart label.
*/}}
{{- define "admetrics.chart" -}}
{{- printf "%s-%s" .Chart.Name .Chart.Version | replace "+" "_" | trunc 63 | trimSuffix "-" }}
{{- end }}

{{/*
Common labels
*/}}
{{- define "admetrics.labels" -}}
helm.sh/chart: {{ include "admetrics.chart" . }}
{{ include "admetrics.selectorLabels" . }}
{{- if .Chart.AppVersion }}
app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
{{- end }}
app.kubernetes.io/managed-by: {{ .Release.Service }}
{{- end }}

{{/*
Selector labels
*/}}
{{- define "admetrics.selectorLabels" -}}
app.kubernetes.io/name: {{ include "admetrics.name" . }}
app.kubernetes.io/instance: {{ .Release.Name }}
{{- end }}

{{/*
Create the name of the service account to use
*/}}
{{- define "admetrics.serviceAccountName" -}}
{{- if .Values.serviceAccount.create }}
{{- default (include "admetrics.fullname" .) .Values.serviceAccount.name }}
{{- else }}
{{- default "default" .Values.serviceAccount.name }}
{{- end }}
{{- end }}

{{/*
Database URL
*/}}
{{- define "admetrics.databaseUrl" -}}
{{- if .Values.postgresql.enabled }}
postgresql://postgres:{{ .Values.postgresql.auth.postgresPassword }}@{{ include "admetrics.fullname" . }}-postgresql:5432/{{ .Values.postgresql.auth.database }}
{{- else }}
{{- .Values.externalDatabase.url }}
{{- end }}
{{- end }}

{{/*
Redis URL
*/}}
{{- define "admetrics.redisUrl" -}}
{{- if .Values.redis.enabled }}
redis://{{ include "admetrics.fullname" . }}-redis-master:6379
{{- else }}
{{- .Values.externalRedis.url }}
{{- end }}
{{- end }}

---

# helm/admetrics/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "admetrics.fullname" . }}-config
  labels:
    {{- include "admetrics.labels" . | nindent 4 }}
data:
  {{- range $key, $value := .Values.config.env }}
  {{ $key }}: {{ $value | quote }}
  {{- end }}

---

# helm/admetrics/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "admetrics.fullname" . }}-secret
  labels:
    {{- include "admetrics.labels" . | nindent 4 }}
type: Opaque
data:
  database-url: {{ include "admetrics.databaseUrl" . | b64enc }}
  redis-url: {{ include "admetrics.redisUrl" . | b64enc }}
  {{- range $key, $value := .Values.config.secrets }}
  {{ $key }}: {{ $value | b64enc }}
  {{- end }}

---

# helm/admetrics/templates/ingress.yaml
{{- if .Values.ingress.enabled -}}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "admetrics.fullname" . }}
  labels:
    {{- include "admetrics.labels" . | nindent 4 }}
  {{- with .Values.ingress.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- if .Values.ingress.className }}
  ingressClassName: {{ .Values.ingress.className }}
  {{- end }}
  {{- if .Values.ingress.tls }}
  tls:
    {{- range .Values.ingress.tls }}
    - hosts:
        {{- range .hosts }}
        - {{ . | quote }}
        {{- end }}
      secretName: {{ .secretName }}
    {{- end }}
  {{- end }}
  rules:
    {{- range .Values.ingress.hosts }}
    - host: {{ .host | quote }}
      http:
        paths:
          {{- range .paths }}
          - path: {{ .path }}
            pathType: {{ .pathType }}
            backend:
              service:
                name: {{ include "admetrics.fullname" $ }}-{{ .service }}
                port:
                  number: {{ index $.Values.service.ports .service }}
          {{- end }}
    {{- end }}
{{- end }}

---

# helm/admetrics/templates/hpa.yaml
{{- if .Values.autoscaling.enabled }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ include "admetrics.fullname" . }}-backend
  labels:
    {{- include "admetrics.labels" . | nindent 4 }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "admetrics.fullname" . }}-backend
  minReplicas: {{ .Values.autoscaling.minReplicas }}
  maxReplicas: {{ .Values.autoscaling.maxReplicas }}
  metrics:
    {{- if .Values.autoscaling.targetCPUUtilizationPercentage }}
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: {{ .Values.autoscaling.targetCPUUtilizationPercentage }}
    {{- end }}
    {{- if .Values.autoscaling.targetMemoryUtilizationPercentage }}
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: {{ .Values.autoscaling.targetMemoryUtilizationPercentage }}
    {{- end }}
{{- end }}